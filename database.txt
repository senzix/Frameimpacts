1. Users Table
user_id (Primary Key)
username
email
password_hash
first_name
last_name
created_at
updated_at
2. Courses Table
course_id (Primary Key)
title
description
image_path
video_url (Link to Vimeo video)
created_by (User ID of the creator)
created_at
updated_at
3. Course_Payments Table
payment_id (Primary Key)
user_id (Foreign Key referencing Users)
course_id (Foreign Key referencing Courses)
amount
currency
payment_status (e.g., pending, completed, failed)
payment_method (e.g., Razorpay)
razorpay_payment_id (Payment ID from Razorpay)
razorpay_order_id (Order ID from Razorpay)
created_at
4. Comments Table
comment_id (Primary Key)
post_id (Foreign Key referencing Blogs)
user_id (Foreign Key referencing Users)
comment_author (Name of the author if not logged in)
comment_content
comment_status (e.g., approved, pending, spam)
created_at
updated_at
5. Contact_Messages Table
message_id (Primary Key)
name
email
message
created_at
6. Newsletter_Subscribers Table
subscriber_id (Primary Key)
email
created_at
7. Admin_Actions Table (for logging admin actions)
action_id (Primary Key)
admin_id (Foreign Key referencing Users)
action_type (e.g., add_blog, edit_course)
details
created_at
8. Blogs Table (for managing blog posts)
post_id (Primary Key)
title
content
image_path
created_by (Foreign Key referencing Users)
created_at
updated_at
9. Blog_Categories Table (optional, if you want to categorize blogs)
category_id (Primary Key)
category_name
created_at
updated_at
10. Course_Categories Table (optional, if you want to categorize courses)
category_id (Primary Key)
category_name
created_at
updated_at
11. Blog_Categories_Association Table (if you use categories for blogs)
post_id (Foreign Key referencing Blogs)
category_id (Foreign Key referencing Blog_Categories)
12. Course_Categories_Association Table (if you use categories for courses)
course_id (Foreign Key referencing Courses)
category_id (Foreign Key referencing Course_Categories)




sql:
-- Users Table
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Courses Table
CREATE TABLE courses (
    course_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    image_path VARCHAR(255),
    video_url VARCHAR(255),
    created_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (created_by) REFERENCES users(user_id)
);

-- Course_Payments Table
CREATE TABLE course_payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    course_id INT,
    amount DECIMAL(10, 2) NOT NULL,
    currency VARCHAR(10) NOT NULL,
    payment_status ENUM('pending', 'completed', 'failed') NOT NULL,
    payment_method VARCHAR(50) NOT NULL,
    razorpay_payment_id VARCHAR(255),
    razorpay_order_id VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (course_id) REFERENCES courses(course_id)
);

-- Comments Table
CREATE TABLE comments (
    comment_id INT AUTO_INCREMENT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_author VARCHAR(100),
    comment_content TEXT,
    comment_status ENUM('approved', 'pending', 'spam') DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES blogs(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Contact_Messages Table
CREATE TABLE contact_messages (
    message_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL,
    message TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Newsletter_Subscribers Table
CREATE TABLE newsletter_subscribers (
    subscriber_id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(100) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Admin_Actions Table
CREATE TABLE admin_actions (
    action_id INT AUTO_INCREMENT PRIMARY KEY,
    admin_id INT,
    action_type VARCHAR(50) NOT NULL,
    details TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (admin_id) REFERENCES users(user_id)
);

-- Blogs Table
CREATE TABLE blogs (
    post_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    image_path VARCHAR(255),
    created_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (created_by) REFERENCES users(user_id)
);

-- Blog_Categories Table (optional)
CREATE TABLE blog_categories (
    category_id INT AUTO_INCREMENT PRIMARY KEY,
    category_name VARCHAR(100) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Course_Categories Table (optional)
CREATE TABLE course_categories (
    category_id INT AUTO_INCREMENT PRIMARY KEY,
    category_name VARCHAR(100) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Blog_Categories_Association Table (optional, if you use categories for blogs)
CREATE TABLE blog_categories_association (
    post_id INT,
    category_id INT,
    PRIMARY KEY (post_id, category_id),
    FOREIGN KEY (post_id) REFERENCES blogs(post_id),
    FOREIGN KEY (category_id) REFERENCES blog_categories(category_id)
);

-- Course_Categories_Association Table (optional, if you use categories for courses)
CREATE TABLE course_categories_association (
    course_id INT,
    category_id INT,
    PRIMARY KEY (course_id, category_id),
    FOREIGN KEY (course_id) REFERENCES courses(course_id),
    FOREIGN KEY (category_id) REFERENCES course_categories(category_id)
);
